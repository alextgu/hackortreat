import json
import random

def load_context(filename):
    """
    Load the Gemini-friendly summary JSON file.
    """
    with open(filename, 'r', encoding='utf-8') as f:
        return json.load(f)

def generate_linkedin_post(post_summary):
    """
    Generate a LinkedIn-style post using the post summary context.

    Args:
        post_summary (dict): Dictionary with keys: 'post_id', 'style_preset', 
                             'original_context', 'text_snippet', 'hashtags'

    Returns:
        dict: Generated LinkedIn post dictionary
    """
    style = post_summary.get('style_preset') or post_summary.get('style') or 'professional'
    snippet = post_summary.get('text_snippet', '')
    context = post_summary.get('original_context', '')
    hashtags = post_summary.get('hashtags', [])

    # Hook: first sentence from snippet or crafted from context
    hook = snippet.split('.')[0] + '.' if snippet else f"{context} is the focus today."

    # Full post text: snippet + a reflective closing line
    full_post = f"{snippet}\n\nRemember: {context} is what drives impact and growth in every venture."

    return {
        "post_id": post_summary.get('post_id'),
        "platform": "LinkedIn",
        "style": style,
        "hook_or_headline": hook,
        "full_post_text": full_post,
        "hashtags": hashtags,
        "intended_reaction": "Inform, inspire, and engage with professional audience",
        "tone_notes": f"Reflects {style} style using preset Gemini context"
    }

if __name__ == "__main__":
    # Load the context JSON generated by your parser
    context_file = input("Enter path to Gemini summary JSON file: ").strip()
    context = load_context(context_file)

    # Generate LinkedIn posts from all summaries
    generated_posts = []
    for summary in context.get('posts_summary', []):
        post = generate_linkedin_post(summary)
        generated_posts.append(post)

    # Output the generated LinkedIn posts JSON
    print(json.dumps(generated_posts, indent=2))
